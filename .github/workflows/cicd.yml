name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      IMAGE_NAME: codinggroot/easy-schedule
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push multi-arch Docker image with caching
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --cache-from=type=registry,ref=${IMAGE_NAME}:cache \
            --cache-to=type=registry,ref=${IMAGE_NAME}:cache,mode=max \
            -f Dockerfile.prod \
            -t ${IMAGE_NAME}:${IMAGE_TAG} \
            -t ${IMAGE_NAME}:latest \
            --push .

  deploy:
    runs-on: ubuntu-22.04
    needs: build
    if: github.ref == 'refs/heads/main'
    env:
      IMAGE_NAME: codinggroot/easy-schedule
    steps:
      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }} # 서버 IP 또는 도메인
          username: ${{ secrets.SSH_USERNAME }} # SSH 사용자명
          key: ${{ secrets.SSH_KEY }} # SSH 비밀키 (문자열)
          script: |
            echo "Pulling latest image..."
            docker pull ${{ env.IMAGE_NAME }}:latest
            echo "Stopping and removing existing container..."
            docker stop easyshift_prod || true
            docker rm easyshift_prod || true
            echo "Starting new container with DB config..."
            docker run -d --restart unless-stopped --name easyshift_prod -p 80:8080 \
              -e SERVER_PORT="${{ secrets.SERVER_PORT }}" \
              -e DB_URL="${{ secrets.DB_URL }}" \
              -e DB_DRIVER="${{ secrets.DB_DRIVER }}" \
              -e DB_DIALECT="${{ secrets.DB_DIALECT }}" \
              -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              ${{ env.IMAGE_NAME }}:latest
